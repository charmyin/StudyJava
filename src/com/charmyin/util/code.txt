1. import java.awt.*;
  2. import java.awt.event.*;
  3. import java.util.*;
  4. import java.net.*;
  5. import java.io.*;
  6. import java.nio.channels.*;
  7. import javax.swing.*;
  8.
  9. /**
 10.    This program shows how to interrupt a socket channel.
 11. */
 12. public class InterruptibleSocketTest
 13. {
 14.    public static void main(String[] args)
 15.    {
 16.       JFrame frame = new InterruptibleSocketFrame();
 17.       frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
 18.       frame.setVisible(true);
 19.    }
 20. }
 21.
 22. class InterruptibleSocketFrame extends JFrame
 23. {
 24.    public InterruptibleSocketFrame()
 25.    {
 26.       setSize(WIDTH, HEIGHT);
 27.       setTitle("InterruptibleSocketTest");
 28.
 29.       JPanel northPanel = new JPanel();
 30.       add(northPanel, BorderLayout.NORTH);
 31.
 32.       messages = new JTextArea();
 33.       add(new JScrollPane(messages));
 34.
 35.       busyBox = new JCheckBox("Busy");
 36.       northPanel.add(busyBox);
 37.
 38.       startButton = new JButton("Start");
 39.       northPanel.add(startButton);
 40.       startButton.addActionListener(new
 41.          ActionListener()
 42.          {
 43.             public void actionPerformed(ActionEvent event)
 44.             {
 45.                startButton.setEnabled(false);
 46.                cancelButton.setEnabled(true);
 47.                connectThread = new Thread(new
 48.                   Runnable()
 49.                   {
 50.                      public void run()
 51.                      {
 52.                         connect();
 53.                      }
 54.                   });
 55.                connectThread.start();
 56.             }
 57.          });
 58.
 59.       cancelButton = new JButton("Cancel");
 60.       cancelButton.setEnabled(false);
 61.       northPanel.add(cancelButton);
 62.       cancelButton.addActionListener(new
 63.          ActionListener()
 64.          {
 65.             public void actionPerformed(ActionEvent event)
 66.             {
 67.                connectThread.interrupt();
 68.                startButton.setEnabled(true);
 69.                cancelButton.setEnabled(false);
 70.             }
 71.          });
 72.       server = new TestServer();
 73.       new Thread(server).start();
 74.    }
 75.
 76.    /**
 77.       Connects to the test server.
 78.    */
 79.    public void connect()
 80.    {
 81.       try
 82.       {
 83.          SocketChannel channel = SocketChannel.open(new InetSocketAddress("localhost"
, 8189));
 84.          try
 85.          {
 86.             in = new Scanner(channel);
 87.             while (true)
 88.             {
 89.                if (in.hasNextLine())
 90.                {
 91.                   String line = in.nextLine();
 92.                   messages.append(line);
 93.                   messages.append("\n");
 94.                }
 95.                else Thread.sleep(100);
 96.             }
 97.          }
 98.          finally
 99.          {
100.             channel.close();
101.             messages.append("Socket closed\n");
102.          }
103.       }
104.       catch (IOException e)
105.       {
106.          messages.append("\nInterruptibleSocketTest.connect: " + e);
107.       }
108.       catch (InterruptedException e)
109.       {
110.          messages.append("\nInterruptibleSocketTest.connect: " + e);
111.       }
112.    }
113.
114.    /**
115.       A multithreaded server that listens to port 8189 and sends random numbers to
 the client.
116.    */
117.    class TestServer implements Runnable
118.    {
119.       public void run()
120.       {
121.          try
122.          {
123.             int i = 1;
124.             ServerSocket s = new ServerSocket(8189);
125.
126.             while (true)
127.             {
128.                Socket incoming = s.accept();
129.                Runnable r = new RandomNumberHandler(incoming);
130.                Thread t = new Thread(r);
131.                t.start();
132.             }
133.          }
134.          catch (IOException e)
135.          {
136.             messages.append("\nTestServer.run: " + e);
137.          }
138.       }
139.    }
140.
141.    /**
142.       This class handles the client input for one server socket connection.
143.    */
144.    class RandomNumberHandler implements Runnable
145.    {
146.       /**
147.          Constructs a handler.
148.          @param i the incoming socket
149.       */
150.       public RandomNumberHandler(Socket i)
151.       {
152.          incoming = i;
153.       }
154.
155.       public void run()
156.       {
157.          try
158.          {
159.             OutputStream outStream = incoming.getOutputStream();
160.             PrintWriter out = new PrintWriter(outStream, true /* autoFlush */);
161.             Random generator = new Random();
162.             while (true)
163.             {
164.                if (!busyBox.isSelected()) out.println(generator.nextInt());
165.                Thread.sleep(100);
166.             }
167.          }
168.          catch (IOException e)
169.          {
170.             messages.append("\nRandomNumberHandler.run: " + e);
171.          }
172.          catch (InterruptedException e)
173.          {
174.             messages.append("\nRandomNumberHandler.run: " + e);
175.          }
176.       }
177.
178.       private Socket incoming;
179.    }
180.
181.    private Scanner in;
182.    private PrintWriter out;
183.    private JButton startButton;
184.    private JButton cancelButton;
185.    private JCheckBox busyBox;
186.    private JTextArea messages;
187.    private TestServer server;
188.    private Thread connectThread;
189.
190.    public static final int WIDTH = 300;
191.    public static final int HEIGHT = 300;
192. }
